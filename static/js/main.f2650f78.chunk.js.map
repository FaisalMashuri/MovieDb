{"version":3,"sources":["components/Search.js","components/Result.js","components/Results.js","components/Popup.js","App.js","serviceWorker.js","index.js"],"names":["Search","handleInput","search","className","type","placeholder","onChange","onKeyPress","Result","result","openPopup","onClick","imdbID","src","Poster","Title","Results","results","map","key","Popup","selected","closePopup","Year","imdbRating","Plot","App","useState","s","state","setState","apiurl","e","target","value","prevState","axios","then","data","console","log","id","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"+NAgBeA,MAbf,YAAyC,IAAvBC,EAAsB,EAAtBA,YAAaC,EAAS,EAATA,OAC7B,OACE,6BAASC,UAAU,kBACjB,2BAAOC,KAAK,OACXC,YAAY,4BACZF,UAAU,YACXG,SAAUL,EACVM,WAAYL,M,gBCCHM,MATf,YAAwC,IAAtBC,EAAqB,EAArBA,OAASC,EAAY,EAAZA,UACzB,OACE,yBAAKP,UAAU,SAASQ,QAAS,kBAAKD,EAAUD,EAAOG,UACrD,yBAAKC,IAAKJ,EAAOK,SACjB,4BAAKL,EAAOM,SCQHC,MAVf,YAAyC,IAAtBC,EAAqB,EAArBA,QAASP,EAAY,EAAZA,UAC1B,OACE,6BAASP,UAAU,WAChBc,EAAQC,KAAI,SAAAT,GAAM,OACjB,kBAAC,EAAD,CAAQU,IAAKV,EAAOG,OAAQH,OAAQA,EAAQC,UAAWA,SCYhDU,MAlBf,YAA0C,IAAzBC,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,WACzB,OACE,6BAASnB,UAAU,SACjB,yBAAKA,UAAU,WACb,4BAAKkB,EAASN,MAAd,IAAqB,kCAAQM,EAASE,OACtC,uBAAGpB,UAAU,UAAb,YAAgCkB,EAASG,WAAzC,KACA,yBAAKrB,UAAU,QACb,yBAAKU,IAAKQ,EAASP,SACnB,2BAAIO,EAASI,MACb,8BAGF,4BAAQtB,UAAU,QAAQQ,QAASW,GAAnC,YC6DOI,MApEf,WAAiB,IAAD,EACYC,mBAAS,CACjCC,EAAE,GACFnB,OAAO,GACPY,SAAS,KAJG,mBACPQ,EADO,KACAC,EADA,KAMRC,EAAS,0CA2Cf,OACE,yBAAK5B,UAAU,OACb,4BAAQA,UAAU,cAChB,gCACE,+CAEF,8BACE,kBAAC,EAAD,CAAQF,YAnCI,SAAC+B,GACnB,IAAIJ,EAAII,EAAEC,OAAOC,MAEjBJ,GAAS,SAAAK,GACP,OAAO,eAAIA,EAAX,CAAsBP,EAAGA,QA+Be1B,OAhD7B,SAAC8B,GACA,UAAVA,EAAEb,KACJiB,IAAML,EAAS,MAAQF,EAAMD,GAC5BS,MAAK,YAAa,IAAXC,EAAU,EAAVA,KACNC,QAAQC,IAAIF,GACZ,IAAI7B,EAAS6B,EAAKtC,OAElB8B,GAAS,SAAAK,GACP,OAAO,eAAIA,EAAX,CAAqB1B,OAAQA,aA0C7B,kBAAC,EAAD,CAASQ,QAASY,EAAMpB,OAAQC,UA3BtB,SAAA+B,GAChBL,IAAML,EAAS,MAAQU,GACtBJ,MAAK,YAAY,IACZ5B,EADW,EAAT6B,KAGNR,GAAS,SAAAK,GACP,OAAO,eAAIA,EAAX,CAAsBd,SAAUZ,aAuBG,oBAAxBoB,EAAMR,SAASN,OAAwB,kBAAC,EAAD,CAAOM,SAAUQ,EAAMR,SAAUC,WAlBtE,WACjBQ,GAAS,SAAAK,GACP,OAAO,eAAIA,EAAX,CAAsBd,SAAS,eCvCjBqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjB,MAAK,SAAAkB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnB,QAAQmB,MAAMA,EAAMC,c","file":"static/js/main.f2650f78.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nfunction Search({ handleInput, search }){\r\n  return(\r\n    <section className=\"searchbox-wrap\">\r\n      <input type=\"text\"\r\n       placeholder=\"Search for a movie ......\"\r\n       className=\"searchbox\"\r\n      onChange={handleInput}\r\n      onKeyPress={search}\r\n      />\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default Search;\r\n","import React from 'react'\r\n\r\nfunction Result({ result , openPopup}) {\r\n  return (\r\n    <div className=\"result\" onClick={() =>openPopup(result.imdbID)}>\r\n      <img src={result.Poster} />\r\n      <h3>{result.Title}</h3>\r\n    </div>\r\n  )\r\n\r\n}\r\nexport default Result;\r\n","import React from 'react'\r\n\r\nimport Result from './Result'\r\n\r\nfunction Results({ results, openPopup }){\r\n  return (\r\n    <section className=\"results\">\r\n      {results.map(result => (\r\n        <Result key={result.imdbID} result={result} openPopup={openPopup}/>\r\n      ))}\r\n\r\n    </section>\r\n  )\r\n}\r\nexport default Results;\r\n","import React from 'react'\r\n\r\nfunction Popup({ selected, closePopup }) {\r\n  return(\r\n    <section className=\"popup\">\r\n      <div className=\"content\">\r\n        <h2>{selected.Title} <span> {selected.Year}</span></h2>\r\n        <p className=\"rating\">Rating : {selected.imdbRating} </p>\r\n        <div className=\"plot\">\r\n          <img src={selected.Poster} />\r\n          <p>{selected.Plot}</p>\r\n          <br />\r\n\r\n        </div>\r\n        <button className=\"close\" onClick={closePopup}>Close</button>\r\n      </div>\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default Popup;\r\n","import React, {useState} from 'react'\nimport Search from './components/Search'\nimport axios from 'axios'\nimport Results from './components/Results'\nimport Popup from './components/Popup'\n\n\nfunction App () {\n  const [state, setState] = useState({\n    s:\"\",\n    result:[],\n    selected:{},\n  });\n  const apiurl = \"http://www.omdbapi.com/?apikey=dfe6d885\";\n\n  const search = (e) => {\n    if (e.key === \"Enter\") {\n      axios(apiurl + \"&s=\" + state.s)\n      .then(({data}) => {\n        console.log(data);\n        let result = data.Search;\n\n        setState(prevState =>{\n          return {...prevState,result: result}\n        })\n      });\n    }\n  }\n  const handleInput = (e) =>{\n    let s = e.target.value;\n\n    setState(prevState => {\n      return {...prevState, s: s }\n    });\n\n\n  }\n\n  const openPopup = id =>{\n    axios(apiurl + \"&i=\" + id)\n    .then(({data}) =>{\n      let result = data;\n\n      setState(prevState => {\n        return {...prevState, selected: result}\n      });\n    });\n  }\n\n  const closePopup = () => {\n    setState(prevState => {\n      return {...prevState, selected:{}}\n    });\n  }\n\n\n  return (\n    <div className='App'>\n      <header className='App-header'>\n        <header>\n          <h1>Movie Database</h1>\n        </header>\n        <main>\n          <Search handleInput = {handleInput} search={search}/>\n\n          <Results results={state.result} openPopup={openPopup} />\n\n          {(typeof state.selected.Title != \"undefined\") ? <Popup selected={state.selected} closePopup={closePopup} /> : false}\n        </main>\n\n      </header>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}